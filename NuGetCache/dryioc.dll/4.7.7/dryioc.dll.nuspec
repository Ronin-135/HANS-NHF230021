<?xml version="1.0" encoding="utf-8"?>
<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
  <metadata>
    <id>DryIoc.dll</id>
    <version>4.7.7</version>
    <title>DryIoc.dll</title>
    <authors>Maksim Volkau</authors>
    <owners>Maksim Volkau</owners>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <license type="expression">MIT</license>
    <licenseUrl>https://licenses.nuget.org/MIT</licenseUrl>
    <projectUrl>https://github.com/dadhi/DryIoc</projectUrl>
    <iconUrl>https://github.com/dadhi/DryIoc/blob/master/logo/icon.png</iconUrl>
    <description>DryIoc is fast, small, full-featured IoC Container for .NET</description>
    <releaseNotes>## v4.7.7 Bug-fix release

- fixed: #399 Func dependency on Singleton resolved under scope breaks after disposing scope when WithFuncAndLazyWithoutRegistration()


## v4.7.6 Bug-fix release

- fixed: #391 Deadlock during Resolve
- fixed: #394 For_Func_returned_type_with_lazy_dependency_Func_parameters_are_correctly_passed


## v4.7.5 Bug-fix release

- #390 NullReferenceException on Unregister
- fixed the potential issue with the switching back from the SelectLastFactoryRule to the default rule


## v4.7.4 Bug-fix release

- #376 DryIoc.Interpreter seems to mess up the exception call stack
- #378 Inconsistent resolution failure 


## v4.7.3 Bug-fix release

- #367 Resolve with FactoryMethod of instance throws DryIoc.ContainerException


## v4.7.2 Bug-fix release

- #365 Really fixing: Made.Of() Parameters incorrectly reused depending on Register() usage


## v4.7.1 Bug-fix release

- #365 Made.Of() Parameters incorrectly reused depending on Register() usage


## v4.7.0 Feature release

- #338 Child container disposes parent container singletons
- #355 Auto mocking feature for unit testing
- #356 Surface the FindFactoryWithTheMinReuseLifespan so it can be used together with the FactorySelector
- #357 Avoid overload ambiguity for the ScopedTo(Type) by adding the separate ScopedToService
- #358 Add and surface the Scope.Clone(withDisposables=false) to enable more ChildContainer scenarios
- #359 DynamicRegistrationsAsFallback being unnecessary called multiple times
- #360 Mark DynamicRegistrationProvider with the FactoryType (Service, Decorator or combination) to avoid unnecessary provider call and factory creation
- #363 Add CreateChild method as the basis for CreateFacade and such


## v4.6.0 Feature release

- #216 Add Rules.WithThrowIfScopedOrSingletonHasTransientDependency 
- #343 Scope validation for Transient does not work as expected 
- #344 Scope is disposed before parent when using facade (added Scopes and Singleton cloning into CreateFacade)
- #348 Create a child container without WithNoMoreRegistrationAllowed flag (surfacing IsRegistryChangePermitted in With method)
- #350 Wrong scoped resolve (together with MS DI rules)
- #352 Consider resolving the variance compatible open-generic the same as for collection of open-generics (added Rules.WithVarianceGenericTypesInResolve)</releaseNotes>
    <copyright>Copyright © 2013-2021 Maksim Volkau</copyright>
    <tags>IoC Container Inversion-of-Control DI Dependency-Injection DRY Service-Provider Factory FastExpressionCompiler ImTools</tags>
    <repository type="git" url="https://github.com/dadhi/DryIoc.git" commit="3bb90715f04142c1515f5de97ad3107201956890" />
    <dependencies>
      <group targetFramework=".NETFramework3.5" />
      <group targetFramework=".NETFramework4.0" />
      <group targetFramework=".NETFramework4.5" />
      <group targetFramework=".NETPortable0.0-Profile259" />
      <group targetFramework=".NETPortable0.0-Profile328" />
      <group targetFramework=".NETStandard1.0">
        <dependency id="NETStandard.Library" version="1.6.1" exclude="Build,Analyzers" />
      </group>
      <group targetFramework=".NETStandard1.3">
        <dependency id="NETStandard.Library" version="1.6.1" exclude="Build,Analyzers" />
        <dependency id="System.Reflection.Emit.Lightweight" version="4.3.0" exclude="Build,Analyzers" />
      </group>
      <group targetFramework=".NETStandard2.0">
        <dependency id="System.Reflection.Emit.Lightweight" version="4.3.0" exclude="Build,Analyzers" />
      </group>
    </dependencies>
  </metadata>
</package>